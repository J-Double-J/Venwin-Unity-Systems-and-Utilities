using System;
using System.Collections.Generic;

namespace Venwin.DataStructures
{
    /// <summary>
    /// Queue that has can be given priorities that allows them to be dequeued faster.
    /// </summary>
    /// <remarks>
    /// This was generated by ChatGPT, and I only sort of follow it.<br/>
    /// Supposedly its O(log n) instead of O(n log n) if you use a list and sort it every time.
    /// <br/>
    /// Because I don't want to implement my own version and don't want to think about it, I will trust this implementation until it gives me problems.
    /// </remarks>
    /// <typeparam name="T"></typeparam>
    public class PriorityQueue<T>
    {
        private List<KeyValuePair<T, int>> elements = new List<KeyValuePair<T, int>>();

        public int Count => elements.Count;

        public void Enqueue(T item, int priority)
        {
            elements.Add(new KeyValuePair<T, int>(item, priority));
            HeapifyUp(elements.Count - 1);
        }

        public T Dequeue()
        {
            if (elements.Count == 0)
                throw new InvalidOperationException("Priority queue is empty.");

            var bestItem = elements[0];
            elements[0] = elements[elements.Count - 1];
            elements.RemoveAt(elements.Count - 1);
            HeapifyDown(0);

            return bestItem.Key;
        }

        private void HeapifyUp(int index)
        {
            while (index > 0)
            {
                int parentIndex = (index - 1) / 2;
                if (elements[index].Value >= elements[parentIndex].Value)
                    break;

                Swap(index, parentIndex);
                index = parentIndex;
            }
        }

        private void HeapifyDown(int index)
        {
            int lastIndex = elements.Count - 1;
            while (index < lastIndex)
            {
                int leftChildIndex = 2 * index + 1;
                int rightChildIndex = 2 * index + 2;
                int smallestIndex = index;

                if (leftChildIndex <= lastIndex && elements[leftChildIndex].Value < elements[smallestIndex].Value)
                {
                    smallestIndex = leftChildIndex;
                }

                if (rightChildIndex <= lastIndex && elements[rightChildIndex].Value < elements[smallestIndex].Value)
                {
                    smallestIndex = rightChildIndex;
                }

                if (smallestIndex == index)
                    break;

                Swap(index, smallestIndex);
                index = smallestIndex;
            }
        }

        private void Swap(int i, int j)
        {
            var temp = elements[i];
            elements[i] = elements[j];
            elements[j] = temp;
        }
    }
}
